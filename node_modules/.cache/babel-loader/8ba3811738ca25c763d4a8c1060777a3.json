{"remainingRequest":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USER\\Desktop\\IoT-Heros\\src\\components\\Cards\\ChartCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\src\\components\\Cards\\ChartCard.vue","mtime":1543887593465},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\babel-loader\\lib\\index.js","mtime":1492805601000},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"chart-card\",\n  props: {\n    footerText: {\n      type: String,\n      default: \"\"\n    },\n    headerTitle: {\n      type: String,\n      default: \"Chart title\"\n    },\n    chartType: {\n      type: String,\n      default: \"Line\" // Line | Pie | Bar\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    chartResponsiveOptions: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: []\n        };\n      }\n    },\n    dataBackgroundColor: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      chartId: \"no-id\"\n    };\n  },\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart() {\n      var chartIdQuery = `#${this.chartId}`;\n      this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions);\n    },\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId() {\n      var currentTime = new Date().getTime().toString();\n      var randomInt = this.getRandomInt(0, currentTime);\n      this.chartId = `div_${randomInt}`;\n    },\n    getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n  },\n  mounted() {\n    this.updateChartId();\n    this.$nextTick(this.initChart);\n  }\n};",{"version":3,"sources":["ChartCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA,eAAA;AACA,QAAA,YADA;AAEA,SAAA;AACA,gBAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KADA;AAKA,iBAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KALA;AASA,eAAA;AACA,YAAA,MADA;AAEA,eAAA,MAFA,CAEA;AAFA,KATA;AAaA,kBAAA;AACA,YAAA,MADA;AAEA,eAAA,MAAA;AACA,eAAA,EAAA;AACA;AAJA,KAbA;AAmBA,4BAAA;AACA,YAAA,KADA;AAEA,eAAA,MAAA;AACA,eAAA,EAAA;AACA;AAJA,KAnBA;AAyBA,eAAA;AACA,YAAA,MADA;AAEA,eAAA,MAAA;AACA,eAAA;AACA,kBAAA,EADA;AAEA,kBAAA;AAFA,SAAA;AAIA;AAPA,KAzBA;AAkCA,yBAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA;AAlCA,GAFA;AAyCA,SAAA;AACA,WAAA;AACA,eAAA;AADA,KAAA;AAGA,GA7CA;AA8CA,WAAA;AACA;;;AAGA,gBAAA;AACA,UAAA,eAAA,IAAA,KAAA,OAAA,EAAA;AACA,WAAA,SAAA,CAAA,KAAA,SAAA,EACA,YADA,EAEA,KAAA,SAFA,EAGA,KAAA,YAHA;AAKA,KAXA;AAYA;;;AAGA,oBAAA;AACA,UAAA,cAAA,IAAA,IAAA,GAAA,OAAA,GAAA,QAAA,EAAA;AACA,UAAA,YAAA,KAAA,YAAA,CAAA,CAAA,EAAA,WAAA,CAAA;AACA,WAAA,OAAA,GAAA,OAAA,SAAA,EAAA;AACA,KAnBA;AAoBA,iBAAA,GAAA,EAAA,GAAA,EAAA;AACA,aAAA,KAAA,KAAA,CAAA,KAAA,MAAA,MAAA,MAAA,GAAA,GAAA,CAAA,CAAA,IAAA,GAAA;AACA;AAtBA,GA9CA;AAsEA,YAAA;AACA,SAAA,aAAA;AACA,SAAA,SAAA,CAAA,KAAA,SAAA;AACA;AAzEA,CAAA","sourcesContent":["<template>\n  <md-card>\n    <md-card-header class=\"card-chart\" :data-background-color=\"dataBackgroundColor\">\n      <div :id=\"chartId\" class=\"ct-chart\"></div>\n    </md-card-header>\n\n    <md-card-content>\n      <slot name=\"content\"></slot>\n    </md-card-content>\n\n    <md-card-actions md-alignment=\"left\">\n      <slot name=\"footer\"></slot>\n    </md-card-actions>\n  </md-card>\n</template>\n\n<script>\nexport default {\n  name: \"chart-card\",\n  props: {\n    footerText: {\n      type: String,\n      default: \"\"\n    },\n    headerTitle: {\n      type: String,\n      default: \"Chart title\"\n    },\n    chartType: {\n      type: String,\n      default: \"Line\" // Line | Pie | Bar\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    chartResponsiveOptions: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: []\n        };\n      }\n    },\n    dataBackgroundColor: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      chartId: \"no-id\"\n    };\n  },\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart() {\n      var chartIdQuery = `#${this.chartId}`;\n      this.$Chartist[this.chartType](\n        chartIdQuery,\n        this.chartData,\n        this.chartOptions\n      );\n    },\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId() {\n      var currentTime = new Date().getTime().toString();\n      var randomInt = this.getRandomInt(0, currentTime);\n      this.chartId = `div_${randomInt}`;\n    },\n    getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n  },\n  mounted() {\n    this.updateChartId();\n    this.$nextTick(this.initChart);\n  }\n};\n</script>\n"],"sourceRoot":"src\\components\\Cards"}]}