{"remainingRequest":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USER\\Desktop\\IoT-Heros\\src\\pages\\ArUser.vue?vue&type=style&index=0&id=e4632d80&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\src\\pages\\ArUser.vue","mtime":1544685943777},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndiv {\n    width: 1500px;\n    height: 500px;\n}\n\n",{"version":3,"sources":["ArUser.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+LA;AACA;AACA;AACA","file":"ArUser.vue","sourceRoot":"src\\pages","sourcesContent":["<template>\r\n    <div id=\"container\"></div>\r\n</template>\r\n\r\n<script src=\"../../../../src/build/ar.js\"></script>\r\n<script>THREEx.ArToolkitContext.baseURL = '../'</script>\r\n\r\n<script>\r\nimport * as Three from 'three'\r\n\r\nexport default {\r\n  name: 'ThreeTest',\r\n  data() {\r\n    return {\r\n      camera: null,\r\n      scene: null,\r\n      renderer: null,\r\n      mesh: null\r\n    }\r\n  },\r\n  methods: {\r\n    init: function() {\r\n        let container = document.getElementById('container');\r\n\r\n        this.camera = new Three.PerspectiveCamera(70, container.clientWidth/container.clientHeight, 0.01, 10);\r\n        this.camera.position.z = 1;\r\n\r\n        this.scene = new Three.Scene();\r\n\r\n        let geometry = new Three.BoxGeometry(0.2, 0.2, 0.2);\r\n        let material = new Three.MeshNormalMaterial();\r\n\r\n        this.mesh = new Three.Mesh(geometry, material);\r\n        this.scene.add(this.mesh);\r\n\r\n        this.renderer = new Three.WebGLRenderer({antialias: true});\r\n        this.renderer.setSize(container.clientWidth, container.clientHeight);\r\n        container.appendChild(this.renderer.domElement);\r\n\r\n    },\r\n    animate: function() {\r\n        requestAnimationFrame(this.animate);\r\n        this.mesh.rotation.x += 0.01;\r\n        this.mesh.rotation.y += 0.02;\r\n        this.renderer.render(this.scene, this.camera);\r\n    },\r\n\r\n    abc: function() {\r\n        var renderer\t= new Three.WebGLRenderer({\r\n\t\tantialias: true,\r\n\t\talpha: true\r\n        });\r\n\r\n        renderer.setClearColor(new Three.Color('lightgrey'), 0)\r\n\trenderer.setSize( 640, 480 );\r\n\trenderer.domElement.style.position = 'absolute'\r\n\trenderer.domElement.style.top = '0px'\r\n\trenderer.domElement.style.left = '0px'\r\n\tdocument.body.appendChild( renderer.domElement );\r\n\t// array of functions for the rendering loop\r\n\tvar onRenderFcts= [];\r\n\t// init scene and camera\r\n\tvar scene\t= new Three.Scene();\r\n\t\t\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\t//\t\tInitialize a basic camera\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\t// Create a camera\r\n\tvar camera = new Three.Camera();\r\n\tscene.add(camera);\r\n\t////////////////////////////////////////////////////////////////////////////////\r\n\t//          handle arToolkitSource\r\n\t////////////////////////////////////////////////////////////////////////////////\r\n\t// var arToolkitSource = new Threex.ArToolkitSource({\r\n\t// \t// to read from the webcam \r\n\t// \tsourceType : 'webcam',\r\n\t\t\r\n\t// \t// // to read from an image\r\n\t// \t// sourceType : 'image',\r\n\t// \t// sourceUrl : THREEx.ArToolkitContext.baseURL + '../data/images/img.jpg',\t\t\r\n\t// \t// to read from a video\r\n\t// \t// sourceType : 'video',\r\n\t// \t// sourceUrl : THREEx.ArToolkitContext.baseURL + '../data/videos/headtracking.mp4',\t\t\r\n\t// })\r\n\t// arToolkitSource.init(function onReady(){\r\n\t// \tonResize()\r\n\t// })\r\n\t\r\n\t// // handle resize\r\n\t// window.addEventListener('resize', function(){\r\n\t// \tonResize()\r\n\t// })\r\n\t// function onResize(){\r\n\t// \tarToolkitSource.onResize()\t\r\n\t// \tarToolkitSource.copySizeTo(renderer.domElement)\t\r\n\t// \tif( arToolkitContext.arController !== null ){\r\n\t// \t\tarToolkitSource.copySizeTo(arToolkitContext.arController.canvas)\t\r\n\t// \t}\t\r\n\t// }\r\n\t// ////////////////////////////////////////////////////////////////////////////////\r\n\t// //          initialize arToolkitContext\r\n\t// ////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n\t// // create atToolkitContext\r\n\t// var arToolkitContext = new Threex.ArToolkitContext({\r\n\t// \tcameraParametersUrl: THREEx.ArToolkitContext.baseURL + '../data/data/camera_para.dat',\r\n\t// \tdetectionMode: 'mono',\r\n\t// })\r\n\t// // initialize it\r\n\t// arToolkitContext.init(function onCompleted(){\r\n\t// \t// copy projection matrix to camera\r\n\t// \tcamera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );\r\n\t// })\r\n\t// // update artoolkit on every frame\r\n\t// onRenderFcts.push(function(){\r\n\t// \tif( arToolkitSource.ready === false )\treturn\r\n\t// \tarToolkitContext.update( arToolkitSource.domElement )\r\n\t\t\r\n\t// \t// update scene.visible if the marker is seen\r\n\t// \tscene.visible = camera.visible\r\n\t// })\r\n\t\t\r\n\t// ////////////////////////////////////////////////////////////////////////////////\r\n\t// //          Create a ArMarkerControls\r\n\t// ////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n\t// // init controls for camera\r\n\t// var markerControls = new Threex.ArMarkerControls(arToolkitContext, camera, {\r\n\t// \ttype : 'pattern',\r\n\t// \tpatternUrl : THREEx.ArToolkitContext.baseURL + '../data/data/patt.hiro',\r\n\t// \t// patternUrl : THREEx.ArToolkitContext.baseURL + '../data/data/patt.kanji',\r\n\t// \t// as we controls the camera, set changeMatrixMode: 'cameraTransformMatrix'\r\n\t// \tchangeMatrixMode: 'cameraTransformMatrix'\r\n\t// })\r\n\t// // as we do changeMatrixMode: 'cameraTransformMatrix', start with invisible scene\r\n\t// scene.visible = false\r\n\t// //////////////////////////////////////////////////////////////////////////////////\r\n\t// //\t\tadd an object in the scene\r\n\t// //////////////////////////////////////////////////////////////////////////////////\r\n\t// // add a torus knot\t\r\n\t// var geometry\t= new Three.CubeGeometry(1,1,1);\r\n\t// var material\t= new Three.MeshNormalMaterial({\r\n\t// \ttransparent : true,\r\n\t// \topacity: 0.5,\r\n\t// \tside: THREE.DoubleSide\r\n\t// }); \r\n\t// var mesh\t= new Three.Mesh( geometry, material );\r\n\t// mesh.position.y\t= geometry.parameters.height/2\r\n\t// scene.add( mesh );\r\n\t\r\n\t// var geometry\t= new Three.TorusKnotGeometry(0.3,0.1,64,16);\r\n\t// var material\t= new Three.MeshNormalMaterial(); \r\n\t// var mesh\t= new Three.Mesh( geometry, material );\r\n\t// mesh.position.y\t= 0.5\r\n\t// scene.add( mesh );\r\n\t\r\n\t// onRenderFcts.push(function(delta){\r\n\t// \tmesh.rotation.x += Math.PI*delta\r\n\t// })\r\n\t// //////////////////////////////////////////////////////////////////////////////////\r\n\t// //\t\trender the whole thing on the page\r\n\t// //////////////////////////////////////////////////////////////////////////////////\r\n\t// // render the scene\r\n\t// onRenderFcts.push(function(){\r\n\t// \trenderer.render( scene, camera );\r\n\t// })\r\n\t// // run the rendering loop\r\n\t// var lastTimeMsec= null\r\n\t// requestAnimationFrame(function animate(nowMsec){\r\n\t// \t// keep looping\r\n\t// \trequestAnimationFrame( animate );\r\n\t// \t// measure time\r\n\t// \tlastTimeMsec\t= lastTimeMsec || nowMsec-1000/60\r\n\t// \tvar deltaMsec\t= Math.min(200, nowMsec - lastTimeMsec)\r\n\t// \tlastTimeMsec\t= nowMsec\r\n\t// \t// call each update function\r\n\t// \tonRenderFcts.forEach(function(onRenderFct){\r\n\t// \t\tonRenderFct(deltaMsec/1000, nowMsec/1000)\r\n\t// \t})\r\n\t// })\r\n    }\r\n\r\n  },\r\n  mounted() {\r\n      this.abc();\r\n      this.animate()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n    div {\r\n        width: 1500px;\r\n        height: 500px;\r\n    }\r\n\r\n</style>"]}]}