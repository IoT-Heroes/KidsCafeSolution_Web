{"remainingRequest":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USER\\Desktop\\IoT-Heros\\src\\pages\\ArUser.vue?vue&type=custom&index=0&blockType=meta&name=viewport&content=width%3Ddevice-width%2C%20user-scalable%3Dno%2C%20minimum-scale%3D1.0%2C%20maximum-scale%3D1.0","dependencies":[{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\src\\pages\\ArUser.vue","mtime":1544702071992},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USER\\Desktop\\IoT-Heros\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\r\n<!-- three.js library -->\r\n<script src='vendor/three.js/build/three.min.js'></script>\r\n<!-- ar.js -->\r\n<script src=\"../build/ar.js\"></script>\r\n<script>THREEx.ArToolkitContext.baseURL = '../'</script>\r\n\r\n<body style='margin : 0px; overflow: hidden; font-family: Monospace;'><div style='position: absolute; top: 10px; width:100%; text-align: center; z-index: 1;'>\r\n\t<a href=\"https://github.com/jeromeetienne/AR.js/\" target=\"_blank\">AR.js</a> - three.js camera transform\r\n\t<br/>\r\n\tContact me any time at <a href='https://twitter.com/jerome_etienne' target='_blank'>@jerome_etienne</a>\r\n</div><script>\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\t//\t\tInit\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t// init renderer\r\n\tvar renderer\t= new THREE.WebGLRenderer({\r\n\t\tantialias: true,\r\n\t\talpha: true\r\n\t});\r\n\trenderer.setClearColor(new THREE.Color('lightgrey'), 0)\r\n\trenderer.setSize( 640, 480 );\r\n\trenderer.domElement.style.position = 'absolute'\r\n\trenderer.domElement.style.top = '0px'\r\n\trenderer.domElement.style.left = '0px'\r\n\tdocument.body.appendChild( renderer.domElement );\r\n\r\n\t// array of functions for the rendering loop\r\n\tvar onRenderFcts= [];\r\n\r\n\t// init scene and camera\r\n\tvar scene\t= new THREE.Scene();\r\n\t\t\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\t//\t\tInitialize a basic camera\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t// Create a camera\r\n\tvar camera = new THREE.Camera();\r\n\tscene.add(camera);\r\n\r\n\t////////////////////////////////////////////////////////////////////////////////\r\n\t//          handle arToolkitSource\r\n\t////////////////////////////////////////////////////////////////////////////////\r\n\r\n\tvar arToolkitSource = new THREEx.ArToolkitSource({\r\n\t\t// to read from the webcam \r\n\t\tsourceType : 'webcam',\r\n\t\t\r\n\t\t// // to read from an image\r\n\t\t// sourceType : 'image',\r\n\t\t// sourceUrl : THREEx.ArToolkitContext.baseURL + '../data/images/img.jpg',\t\t\r\n\r\n\t\t// to read from a video\r\n\t\t// sourceType : 'video',\r\n\t\t// sourceUrl : THREEx.ArToolkitContext.baseURL + '../data/videos/headtracking.mp4',\t\t\r\n\t})\r\n\r\n\tarToolkitSource.init(function onReady(){\r\n\t\tonResize()\r\n\t})\r\n\t\r\n\t// handle resize\r\n\twindow.addEventListener('resize', function(){\r\n\t\tonResize()\r\n\t})\r\n\tfunction onResize(){\r\n\t\tarToolkitSource.onResize()\t\r\n\t\tarToolkitSource.copySizeTo(renderer.domElement)\t\r\n\t\tif( arToolkitContext.arController !== null ){\r\n\t\t\tarToolkitSource.copySizeTo(arToolkitContext.arController.canvas)\t\r\n\t\t}\t\r\n\t}\r\n\t////////////////////////////////////////////////////////////////////////////////\r\n\t//          initialize arToolkitContext\r\n\t////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n\r\n\t// create atToolkitContext\r\n\tvar arToolkitContext = new THREEx.ArToolkitContext({\r\n\t\tcameraParametersUrl: THREEx.ArToolkitContext.baseURL + '../data/data/camera_para.dat',\r\n\t\tdetectionMode: 'mono',\r\n\t})\r\n\t// initialize it\r\n\tarToolkitContext.init(function onCompleted(){\r\n\t\t// copy projection matrix to camera\r\n\t\tcamera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );\r\n\t})\r\n\r\n\t// update artoolkit on every frame\r\n\tonRenderFcts.push(function(){\r\n\t\tif( arToolkitSource.ready === false )\treturn\r\n\r\n\t\tarToolkitContext.update( arToolkitSource.domElement )\r\n\t\t\r\n\t\t// update scene.visible if the marker is seen\r\n\t\tscene.visible = camera.visible\r\n\t})\r\n\t\t\r\n\t////////////////////////////////////////////////////////////////////////////////\r\n\t//          Create a ArMarkerControls\r\n\t////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n\t// init controls for camera\r\n\tvar markerControls = new THREEx.ArMarkerControls(arToolkitContext, camera, {\r\n\t\ttype : 'pattern',\r\n\t\tpatternUrl : THREEx.ArToolkitContext.baseURL + '../data/data/patt.hiro',\r\n\t\t// patternUrl : THREEx.ArToolkitContext.baseURL + '../data/data/patt.kanji',\r\n\t\t// as we controls the camera, set changeMatrixMode: 'cameraTransformMatrix'\r\n\t\tchangeMatrixMode: 'cameraTransformMatrix'\r\n\t})\r\n\t// as we do changeMatrixMode: 'cameraTransformMatrix', start with invisible scene\r\n\tscene.visible = false\r\n\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\t//\t\tadd an object in the scene\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t// add a torus knot\t\r\n\tvar geometry\t= new THREE.CubeGeometry(1,1,1);\r\n\tvar material\t= new THREE.MeshNormalMaterial({\r\n\t\ttransparent : true,\r\n\t\topacity: 0.5,\r\n\t\tside: THREE.DoubleSide\r\n\t}); \r\n\tvar mesh\t= new THREE.Mesh( geometry, material );\r\n\tmesh.position.y\t= geometry.parameters.height/2\r\n\tscene.add( mesh );\r\n\t\r\n\tvar geometry\t= new THREE.TorusKnotGeometry(0.3,0.1,64,16);\r\n\tvar material\t= new THREE.MeshNormalMaterial(); \r\n\tvar mesh\t= new THREE.Mesh( geometry, material );\r\n\tmesh.position.y\t= 0.5\r\n\tscene.add( mesh );\r\n\t\r\n\tonRenderFcts.push(function(delta){\r\n\t\tmesh.rotation.x += Math.PI*delta\r\n\t})\r\n\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\t//\t\trender the whole thing on the page\r\n\t//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t// render the scene\r\n\tonRenderFcts.push(function(){\r\n\t\trenderer.render( scene, camera );\r\n\t})\r\n\r\n\t// run the rendering loop\r\n\tvar lastTimeMsec= null\r\n\trequestAnimationFrame(function animate(nowMsec){\r\n\t\t// keep looping\r\n\t\trequestAnimationFrame( animate );\r\n\t\t// measure time\r\n\t\tlastTimeMsec\t= lastTimeMsec || nowMsec-1000/60\r\n\t\tvar deltaMsec\t= Math.min(200, nowMsec - lastTimeMsec)\r\n\t\tlastTimeMsec\t= nowMsec\r\n\t\t// call each update function\r\n\t\tonRenderFcts.forEach(function(onRenderFct){\r\n\t\t\tonRenderFct(deltaMsec/1000, nowMsec/1000)\r\n\t\t})\r\n\t})\r\n</script></body>",null]}